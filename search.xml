<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>buuEasyProgram</title>
      <link href="/2021/07/09/buuEasyProgram/"/>
      <url>/2021/07/09/buuEasyProgram/</url>
      
        <content type="html"><![CDATA[<h1 id="buuEasyProgram"><a href="#buuEasyProgram" class="headerlink" title="buuEasyProgram"></a>buuEasyProgram</h1><p>一个简单的异或加密还原一下就可以了.</p><h2 id="Important-properties-of-XOR"><a href="#Important-properties-of-XOR" class="headerlink" title="Important properties of XOR"></a>Important properties of XOR</h2><p> There are 4 very important properties of XOR that we will be making use of. These are formal mathematical terms but actually the concepts are  very simple.</p><ol><li>   Commutative  </li></ol><pre><code> : A ⊕ B = B ⊕ A    This is clear from the definition of XOR: it doesn’t matter which way round you order the two inputs.  </code></pre><ol start="2"><li>   Associative  </li></ol><pre><code> : A ⊕ ( B ⊕ C ) = ( A ⊕ B ) ⊕ C    This means that XOR operations can be chained together and the order  doesn’t matter. If you aren’t convinced of the truth of this statement,  try drawing the truth tables.  </code></pre><ol start="3"><li>   Identity element  </li></ol><pre><code> : A ⊕ 0 = A    This means that any value XOR’d with zero is left unchanged.  </code></pre><ol start="4"><li>   Self-inverse  </li></ol><pre><code> : A ⊕ A = 0    This means that any value XOR’d with itself gives zero.  </code></pre><p> These properties hold not only when XOR is applied to a single bit, but also when it is applied bitwise to a vector of bits (e.g. a byte). For  the rest of this article I will refer to such vectors as bytes, because  it is a concept that all programmers are comfortable with, but don’t let that make you think that the properties only apply to a vector of size  8.</p><p>解密脚本:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">s=[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">t=[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">key=<span class="string">&#x27;whoami&#x27;</span></span><br><span class="line"><span class="comment"># we have flag:????????????????????????????????</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    s[i]=i</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):<span class="comment">#0 to 256</span></span><br><span class="line">    t[i]=key[i%(<span class="built_in">len</span>(key))]</span><br><span class="line">i=j=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span>  <span class="built_in">range</span>(<span class="number">256</span>):<span class="comment">#0 to 256</span></span><br><span class="line">    j=(j+s[i]+<span class="built_in">ord</span>(t[i]))%<span class="number">256</span></span><br><span class="line">    s[i],s[j]=s[j],s[i]</span><br><span class="line">i=j=<span class="number">0</span></span><br><span class="line">f=<span class="string">&quot;00BA8F112B229F51A12FABB74BD73FEFE1B513BEC4D45D03D9007ACA1D51A473B5EF3D9B31B3&quot;</span></span><br><span class="line">flag=[]</span><br><span class="line">flags=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(f),<span class="number">2</span>):</span><br><span class="line">    flag.append(f[i:i+<span class="number">2</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="keyword">if</span> i==<span class="string">&#x27;00&#x27;</span>:</span><br><span class="line">        flags.append(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flags.append(<span class="built_in">int</span>(<span class="string">&#x27;0X&#x27;</span>+i,base=<span class="number">16</span>))</span><br><span class="line"><span class="comment"># s=[2, 5, 84, 118, 146, 14, 92, 139, 233, 242, 127, 75, 172, 55, 197, 1, 131, 113, 20, 206, 202, 19, 18, 186, 58, 154, 178, 247, 25, 245, 120, 130, 83, 114, 204, 243, 223, 188, 144, 236, 40, 80, 124, 238, 52, 16, 41, 66, 117, 132, 8, 47, 65, 164, 158, 99, 90, 56, 214, 73, 7, 210, 220, 82, 110, 123, 199, 218, 15, 109, 96, 95, 225, 12, 231, 106, 24, 98, 147, 222, 22, 21, 93, 153, 87, 142, 135, 71, 175, 37, 94, 107, 88, 244, 155, 111, 34, 183, 115, 50, 89, 239, 61, 72, 189, 112, 250, 69, 35, 252, 134, 53, 177, 156, 179, 182, 126, 237, 10, 235, 208, 200, 161, 181, 91, 38, 97, 159, 26, 3, 165, 145, 221, 187, 228, 216, 169, 162, 108, 13, 86, 152, 148, 4, 11, 255, 166, 190, 85, 248, 198, 193, 104, 203, 217, 184, 125, 246, 151, 232, 163, 171, 32, 201, 78, 143, 173, 195, 226, 105, 207, 28, 122, 229, 60, 251, 219, 48, 209, 116, 121, 101, 170, 168, 191, 27, 211, 157, 136, 77, 70, 30, 36, 128, 205, 62, 17, 196, 230, 167, 133, 49, 194, 79, 240, 33, 192, 174, 253, 46, 138, 129, 176, 227, 43, 100, 9, 149, 63, 215, 51, 31, 45, 119, 224, 54, 103, 57, 23, 102, 81, 39, 213, 241, 140, 185, 29, 212, 74, 59, 180, 44, 249, 68, 234, 76, 6, 160, 64, 254, 137, 42, 141, 67, 0, 150]</span></span><br><span class="line">i=j=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>):<span class="comment">#0 to 38</span></span><br><span class="line">    i=(i + <span class="number">1</span>)%<span class="number">256</span></span><br><span class="line">    j=(j + s[i])%<span class="number">256</span></span><br><span class="line">    s[i], s[j] = s[j], s[i]</span><br><span class="line">    x=(s[i] + (s[j]%<span class="number">256</span>))%<span class="number">256</span></span><br><span class="line">    <span class="comment"># print(m,x)</span></span><br><span class="line">    flags[m]=flags[m]^s[x]</span><br><span class="line"><span class="comment"># print(flags)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flags:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fprint flagx to file</span></span><br></pre></td></tr></table></figure><p>解密结果:flag{f238yu28323uf28u2yef2ud8uf289euf}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BUU[HDCTF2019]together</title>
      <link href="/2021/07/08/BUU%5BHDCTF2019%5Dtogether/"/>
      <url>/2021/07/08/BUU%5BHDCTF2019%5Dtogether/</url>
      
        <content type="html"><![CDATA[<h1 id="BUU-HDCTF2019-together"><a href="#BUU-HDCTF2019-together" class="headerlink" title="BUU[HDCTF2019]together"></a><strong>BUU[HDCTF2019]together</strong></h1><p>第一次写markdown算是一次尝试:</p><p>打开文件后看到4个文件myflag1 ,myflag2,pubkey1,pubkey2公钥分析后可以发现</p><p>n1=n2显然是共模攻击</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">e1 = <span class="number">2333</span></span><br><span class="line">n = <span class="number">14853081277902411240991719582265437298941606850989432655928075747449227799832389574251190347654658701773951599098366248661597113015221566041305501996451638624389417055956926238595947885740084994809382932733556986107653499144588614105694518150594105711438983069306254763078820574239989253573144558449346681620784979079971559976102366527270867527423001083169127402157598183442923364480383742653117285643026319914244072975557200353546060352744263637867557162046429886176035616570590229646013789737629785488326501654202429466891022723268768841320111152381619260637023031430545168618446134188815113100443559425057634959299</span></span><br><span class="line">e2 = <span class="number">23333</span></span><br></pre></td></tr></table></figure><h3 id="RSA共模攻击"><a href="#RSA共模攻击" class="headerlink" title="RSA共模攻击"></a>RSA共模攻击</h3><p>生成秘钥的过程中使用了相同的模数n，此时用不同的秘钥e加密同一信息m即：</p><p>c1 = m^e1 % n<br>c2 = m^e2 % n</p><p>若两个秘钥e互素根据扩展的欧几里得算法则存在s1，s2有：</p><p>e1 * s1 + e2 * s2 = gcd(e1, e2) = 1</p><p>结合以上所有信息，可以得到一个结论：</p><p> (c1^s1 * c2^s2) %n<br>=  (m^e1 % n)^s1 * (m^e2 %n)^s2 % n<br>=  m^(e1 * s1 + e2 * s2) % n<br>=  m % n<br>=  m</p><p>也就是在完全不知道私钥的情况下，得到了明文m</p><p>m = (c1^s1 * c2^s2) % n</p><p>解密脚本:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> libnum <span class="keyword">as</span> li</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"></span><br><span class="line"><span class="comment"># 欧几里得算法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span>(<span class="params">a, b</span>):</span></span><br><span class="line">  <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    g, y, x = egcd(b % a, a)</span><br><span class="line">    <span class="keyword">return</span> (g, x - (b // a) * y, y)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">  f1 = <span class="built_in">open</span>(<span class="string">r&#x27;G:\Desktop\myflag1.txt&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">  f2 = <span class="built_in">open</span>(<span class="string">r&#x27;G:\Desktop\myflag2.txt&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">  e1 = <span class="number">2333</span></span><br><span class="line">  n = <span class="number">14853081277902411240991719582265437298941606850989432655928075747449227799832389574251190347654658701773951599098366248661597113015221566041305501996451638624389417055956926238595947885740084994809382932733556986107653499144588614105694518150594105711438983069306254763078820574239989253573144558449346681620784979079971559976102366527270867527423001083169127402157598183442923364480383742653117285643026319914244072975557200353546060352744263637867557162046429886176035616570590229646013789737629785488326501654202429466891022723268768841320111152381619260637023031430545168618446134188815113100443559425057634959299</span></span><br><span class="line">  e2 = <span class="number">23333</span></span><br><span class="line">  c1 = li.s2n(base64.b64decode(f1.read()))</span><br><span class="line">  c2 = li.s2n(base64.b64decode(f2.read()))</span><br><span class="line">  s = egcd(e1, e2)</span><br><span class="line">  s1 = s[<span class="number">1</span>]</span><br><span class="line">  s2 = s[<span class="number">2</span>]</span><br><span class="line">  <span class="comment"># 求模反元素</span></span><br><span class="line">  <span class="keyword">if</span> s1&lt;<span class="number">0</span>:</span><br><span class="line">    s1 = - s1</span><br><span class="line">    c1 = invert(c1, n)</span><br><span class="line">  <span class="keyword">elif</span> s2&lt;<span class="number">0</span>:</span><br><span class="line">    s2 = - s2</span><br><span class="line">    c2 = invert(c2, n)</span><br><span class="line"></span><br><span class="line">  m = <span class="built_in">pow</span>(c1,s1,n)*<span class="built_in">pow</span>(c2,s2,n) % n</span><br><span class="line">  <span class="built_in">print</span>(li.b2s(<span class="built_in">bin</span>(m)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  main()</span><br></pre></td></tr></table></figure><p>运行结果:b’flag{23re_SDxF_y78hu_5rFgS}’</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BJDCTF2020 编码与调制</title>
      <link href="/2021/07/08/%5BBJDCTF2020%5DCoding_and_modulation/"/>
      <url>/2021/07/08/%5BBJDCTF2020%5DCoding_and_modulation/</url>
      
        <content type="html"><![CDATA[<h1 id="BJDCTF2020-编码与调制"><a href="#BJDCTF2020-编码与调制" class="headerlink" title="[BJDCTF2020]编码与调制"></a>[BJDCTF2020]编码与调制</h1><p>hint中可以大概了解到曼切斯特编码:</p><img "" class="lazyload placeholder" data-original="C:\Users\Hetaoren4\Downloads\Compressed\I'm hint!!!.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" style="zoom: 67%;" /><p>在位中间，信号由高向低跳变表示数据0，信号由低向高跳变表示数据1:</p><p>可以写出解码程序:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">0x2559659965656A9A65656996696965A6695669A9695A699569666A5A6A6569666A59695A69AA696569666AA6</span></span><br><span class="line"><span class="comment"># print(len(bin(x)))</span></span><br><span class="line"><span class="keyword">import</span> libnum <span class="keyword">as</span> li</span><br><span class="line">t=<span class="built_in">str</span>(<span class="built_in">bin</span>(x))[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line">ans=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(t),<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">if</span> t[i:i+<span class="number">2</span>]==<span class="string">&#x27;01&#x27;</span>:</span><br><span class="line">        ans+=<span class="string">&#x27;0&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ans+=<span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(ans)</span><br><span class="line"><span class="built_in">print</span>(li.b2s(ans))</span><br></pre></td></tr></table></figure><p>运行结果:b’BJD{DifManchestercode}’</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BUU[BJDCTF2020]Polybius</title>
      <link href="/2021/07/07/BUU%5BBJDCTF2020%5DPolybius/"/>
      <url>/2021/07/07/BUU%5BBJDCTF2020%5DPolybius/</url>
      
        <content type="html"><![CDATA[<h2 id="BUU-BJDCTF2020-Polybius"><a href="#BUU-BJDCTF2020-Polybius" class="headerlink" title="BUU[BJDCTF2020]Polybius"></a>BUU[BJDCTF2020]Polybius</h2><p>文件类容:</p><p>密文：ouauuuoooeeaaiaeauieuooeeiea<br>hint：VGhlIGxlbmd0aCBvZiB0aGlzIHBsYWludGV4dDogMTQ=<br>flag:解出明文后，请加上BJD{}</p><p>hint是base64加密:解密后是:The length of this plaintext: 14</p><p>密文的长度是28,结合题目可以看出是波利比奥斯方阵密码:</p><h6 id="波利比奥斯方阵密码简介"><a href="#波利比奥斯方阵密码简介" class="headerlink" title="波利比奥斯方阵密码简介"></a><em>波利比奥斯方阵密码简介</em></h6><p><code>公元前2世纪,一个叫Polybius的希腊人设计了一种将字母编码成符号对的方法,他使用了一个称为Polybius的校验表,这个表中包含许多后来在加密系统中非常常见的成分。Polybius校验表由一个5行5列的网格组成,网格中包含26个英文字母,其中I和J在同一格中。相应字母用数对表示。在古代,这种棋盘密码被广泛使用。Polybius校验表如下</code></p><p><img "" class="lazyload placeholder" data-original="C:\Users\Hetaoren4\AppData\Roaming\Typora\typora-user-images\image-20210708192516690.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210708192516690"></p><p>(2,4)这个坐标既可以表示i 也可以表示 j因此破解的时候这里又会多两种情况</p><h6 id="加密过程"><a href="#加密过程" class="headerlink" title="加密过程"></a>加密过程</h6><p>如’a’就被加密乘 1,1 (第1行,第1列)</p><p>1,2,3,4,5可以用字母代替</p><p>如果用A,D,F,G,X代替 ‘a’就变成了AA ,’b’就变成了AD,以此类推.</p><p>从密文的字母推出代换的字母集合为 s=”aeoiu”</p><p>根据全排列代换字母可以爆破出密文.</p><p>解密脚本:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># c=&quot;ouauuuoooeeaaiaeauieuooeeiea&quot;</span></span><br><span class="line"><span class="comment">#length :28</span></span><br><span class="line"><span class="comment"># The length of this plaintext: 14</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">s=<span class="string">&quot;aeoiu&quot;</span></span><br><span class="line">sumresult=[]</span><br><span class="line">numsumresult=[]</span><br><span class="line">ciper=<span class="string">&quot;ouauuuoooeeaaiaeauieuooeeiea&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.permutations(s,<span class="number">5</span>):<span class="comment">#找出所有全排列</span></span><br><span class="line">    sumresult.append(<span class="string">&quot;&quot;</span>.join(i))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sumresult:</span><br><span class="line">    temp=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> ciper:</span><br><span class="line">        temp+=<span class="built_in">str</span>(i.index(j)+<span class="number">1</span>)</span><br><span class="line">    numsumresult.append(temp)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> numsumresult:</span><br><span class="line">    ans_=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(i),<span class="number">2</span>):</span><br><span class="line">        xx=(<span class="built_in">int</span>(i[j])-<span class="number">1</span>)*<span class="number">5</span>+<span class="built_in">int</span>(i[j+<span class="number">1</span>])+<span class="number">96</span></span><br><span class="line">        <span class="keyword">if</span> xx&gt;<span class="built_in">ord</span>(<span class="string">&#x27;i&#x27;</span>):</span><br><span class="line">            xx+=<span class="number">1</span></span><br><span class="line">        ans_+=<span class="built_in">chr</span>(xx)</span><br><span class="line">    <span class="built_in">print</span>(ans_)</span><br></pre></td></tr></table></figure><p>解密结果: flagispolybius</p><p><img "" class="lazyload placeholder" data-original="C:\Users\Hetaoren4\AppData\Roaming\Typora\typora-user-images\image-20210708193201811.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210708193201811"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>my new post</title>
      <link href="/2021/07/07/my-new-post/"/>
      <url>/2021/07/07/my-new-post/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
